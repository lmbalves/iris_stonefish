<launch>
    <!-- Configurable arguments -->
    <arg name="robot_name" default="iris"/>
    <arg name="enable_keyboard" default="true"/>
    <arg name="enable_joystick" default="false"/>
    <arg name="joystick_device" default="/dev/input/js0"/>
    <arg name="enable_gui" default="true"/>
    <arg name="enable_rviz" default="false"/>
    <arg name="is_simulation" default="true"/>

     <!-- Static transform -->
    <node name="world2ned" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 3.1415 world world_ned 100"/>
    <!-- Namespace with robot name -->
    <group ns="$(arg robot_name)">
        <!-- Load configs -->
        <include file="$(find cola2_iris)/launch/sim_configuration.launch"/>

        <!-- Safety nodes -->
        <node name="diagnostic_aggregator" pkg="diagnostic_aggregator" type="aggregator_node">
            <remap from="/diagnostics" to="/$(arg robot_name)/diagnostics"/>
            <remap from="/diagnostics_agg" to="/$(arg robot_name)/diagnostics_agg"/>
            <remap from="/diagnostics_toplevel_state" to="/$(arg robot_name)/diagnostics_toplevel_state"/>
        </node>
        <node name="recovery_actions" pkg="cola2_safety" type="recovery_actions_node.py" output="screen"/>
        <node name="safe_depth_altitude" pkg="cola2_safety" type="safe_depth_altitude_node.py" output="screen"/>
        <node name="safety_supervisor" pkg="cola2_safety" type="safety_supervisor_node.py" output="screen"/>
        <node name="set_zero_velocity" pkg="cola2_safety" type="set_zero_velocity_node.py" output="screen"/>
        <node name="vehicle_status_parser" pkg="cola2_safety" type="vehicle_status_parser_node.py" respawn="true" output="screen"/>
        <node name="virtual_cage" pkg="cola2_safety" type="virtual_cage_node.py" output="screen"/>
        <node name="watchdog" pkg="cola2_safety" type="watchdog_node.py" output="screen"/> 

        <!-- Simulation nodes -->
        <node name="sim_internal_sensors" pkg="cola2_sim" type="sim_internal_sensors_node.py" output="screen"/>

        <!-- Navigation -->
        <node name="navigator" pkg="cola2_nav" type="navigator_node" output="screen"/>

        <!-- Control stack -->
        <node name="captain" pkg="cola2_control" type="captain_node" output="screen">
            <param name="vehicle_config_launch_mission_package" value="cola2_iris"/>
        </node>
        <node name="controller" pkg="cola2_control" type="controller_node"/>
        <node name="pilot" pkg="cola2_control" type="pilot_node" output="screen"/>
        <node name="teleoperation" pkg="cola2_control" type="teleoperation_node.py" output="screen"/>
        <node name="test_thrusters" pkg="cola2_control" type="test_thrusters.py" output="screen"/>

        <!-- Log -->
        <node name="bag_recorder" pkg="cola2_log" type="bag_recorder_node.py" output="screen"/>
        <node name="computer_logger" pkg="cola2_log" type="computer_logger_node.py" respawn="true" output="screen"/>
        <node name="default_param_handler" pkg="cola2_log" type="default_param_handler_node.py" respawn="true" output="screen">
            <param name="config_folder" value="sim_config"/>
        </node>
        <node name="param_logger" pkg="cola2_log" type="param_logger_node.py" output="screen"/>

        <!-- Keyboard -->
        <group if="$(arg enable_keyboard)">
            <node name="keyboard" pkg="cola2_control" type="keyboard_node"/>
            <node name="keyboard_to_teleoperation" pkg="cola2_control" type="keyboard_to_teleoperation_node.py"/>
        </group>

        <!-- Joystick -->
        <group if="$(arg enable_joystick)">
            <node name="joystick" pkg="joy" type="joy_node" respawn="true">
                <param name="dev" value="$(arg joystick_device)"/>
                <param name="deadzone" value="0.05"/>
            </node>
            <node name="fx10_to_teleoperation" pkg="cola2_control" type="logitech_fx10_to_teleoperation_node.py"/>
        </group>

        <!-- Throttle messages -->
        <node name="navigation_throttle" pkg="topic_tools" type="throttle" args="messages navigator/navigation 4.0"/>
        <node name="odometry_throttle" pkg="topic_tools" type="throttle" args="messages navigator/odometry 4.0"/>
        <node name="merged_world_waypoint_req_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_world_waypoint_req 2.0"/>
        <node name="merged_body_velocity_req_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_body_velocity_req 2.0"/>
        <node name="merged_body_force_req_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_body_force_req 2.0"/>
        <node name="thruster_setpoints_throttle" pkg="topic_tools" type="throttle" args="messages controller/thruster_setpoints 4.0"/>

        <!-- GUI mission interface -->
        <include if="$(arg enable_gui)" file="$(find rosbridge_server)/launch/rosbridge_tcp.launch">
            <arg name="port" value="9091"/>
        </include>
    </group>

    <!-- Run Simulator -->
    <include file="$(find stonefish_ros)/launch/simulator.launch">
    	<arg name="simulation_data" value="$(find cola2_stonefish)/data"/>
    	<arg name="scenario_description" value="$(find cola2_stonefish)/scenarios/iris_tank.scn"/>
   		<arg name="simulation_rate" value="300.0"/>
    	<arg name="graphics_resolution" value="1800 900"/>
    	<arg name="graphics_quality" value="medium"/>
    </include>

    <!-- Run RVIZ -->
    <group if="$(arg enable_rviz)">
        <node pkg="rviz" type="rviz" name="rviz" args="-d $(find cola2_iris)/scene/iris.rviz"/>
    </group>

</launch>
